const hip = require('./hip-requests.js');
const sleep = require('sleep');
const json = require('./sanityData.json');
const d = new Date();
const consumerEmail = `hiptest+${Math.round(d.getTime() / 1000)}@mailinator.com`;
const account = process.argv[2];
const accounts = process.argv;
const jobNames = [
  'no_claim_job_for_accepting',
  'no_claim_job_for_declining',
  'enough_claim_job_for_accepting',
  'enough_claim_job_for_declining',
  'no_claim_job_for_reminder',
  'no_claim_job_with_questions'
];
const consumerNames = [
  'Accept Test',
  'Decline Test',
  'Waitlisted Test',
  'Waitlisted Decline Test',
  'Reminder Test',
  'Questions Test'
];

hip.registerUser('Smoke', 'Test', consumerEmail, () => {
  if (typeof account === 'undefined') {
    console.log('No account mentioned for assignment.');
    process.exit(1);
  }
  json.email = consumerEmail;
  hip.writeToJson('./sanityData.json', json, () => { console.log('Json Updated!'); });
  hip.consumerKiwi(consumerEmail, () => {
    json.kiwi = hip.kiwifruit;
    json.deviceToken = hip.deviceToken;
    hip.writeToJson('./sanityData.json', json, () => { console.log('Json Updated!'); });
  });
  for (let i = 0; i < 6; i++) {
    if (i > 4) {
      hip.postJobOptions(hip.randomCategory(), '7467 - Queenstown', 3, '04000000', consumerEmail, consumerNames[i], true, true, false, (res) => {
        sleep.sleep(2);
        hip.postJobWithQuestions(res, (jobId) => {
          inviteAndAssign(account, hip.cookie, jobId, i);
        });
      });
    } else if (i === 2 || i === 3) {
      hip.uploadAttachments((attachments) => {
        hip.postJobOptions(hip.randomCategory(), '7467 - Queenstown', 3, '04000000', consumerEmail, consumerNames[i], true, false, attachments, (res) => {
          hip.postJob(res, (jobId) => {
            multiInvite(accounts, hip.cookie, jobId, i);
          });
        });
      });
    } else {
      hip.postJobOptions(hip.randomCategory(), '7467 - Queenstown', 3, '04000000', consumerEmail, consumerNames[i], true, false, false, (res) => {
        hip.postJob(res, (jobId) => {
          inviteAndAssign(account, hip.cookie, jobId, i);
        });
      });
    }
  }
});


function inviteAndAssign(accountId, cookie, jobId, i) {
  console.log('Job Created.');
  hip.setCookie(() => {
    hip.createAssignments(hip.cookie, jobId, accountId, () => {
      if (i === 4) {
        hip.invite(hip.cookie, jobId, i, () => {
                            // console.log(hip.appUrl+'?m=jobs&a=view_assignments&job_id='+jobId);
          json.jobs[jobNames[i]].job_id = jobId;
          hip.writeToJson('./sanityData.json', json, () => { console.log('Json Updated!'); });
          hip.invite(hip.cookie, json.jobs[jobNames[i]].job_id, 20, () => {
            console.log('Reminder sent!');
          });
        });
      } else {
        hip.invite(hip.cookie, jobId, i, () => {
          // console.log(hip.appUrl+'?m=jobs&a=view_assignments&job_id='+jobId);
          json.jobs[jobNames[i]].job_id = jobId;
          hip.writeToJson('./sanityData.json', json, () => { console.log('Json Updated!'); });
        });
      }
    });
  });
}

function multiInvite(accounts, cookie, jobId, j) {
  hip.setCookie(() => {
    let completed = 2;
    for (let k = 2; k < accounts.length; k++) {
      hip.createAssignments(hip.cookie, jobId, accounts[k], () => {
        completed++;
        if (completed === accounts.length) {
          hip.invite(hip.cookie, jobId, j, () => {
            json.jobs[jobNames[j]].job_id = jobId;
            hip.writeToJson('./sanityData.json', json, () => { console.log('Json Updated!'); });
          });
        }
      });
    }
  });
}
