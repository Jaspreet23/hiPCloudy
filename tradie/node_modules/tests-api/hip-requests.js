const request = require('request');
const RandExp = require('randexp');
const config = require('config');
const categoriesList = require('test-engineering/jobCategoriesStructured.js');
const qs = require('test-engineering/jobQuestions.json');
const fs = require('fs');
const moment = require('moment');

const hipAdminBaseURL = config.get('hipAdminBaseURL');
const hipPublicBaseURL = config.get('hipPublicBaseURL');
const hipWSIOSConsumerURL = config.get('hipWSIOSConsumerURL');
const onDemandServiceBaseURL = config.get('onDemandServiceBaseURL');
const hipWSAndTradieURL = config.get('hipWSAndTradieURL');

exports.appUrl = hipAdminBaseURL;

exports.randomCategory = function () {
  const categoriesArr = categoriesList.jobCategories;
  const categories = categoriesArr.map(a => [a.practice_seo_name, a.practice_id]);
  return categories[Math.floor(Math.random() * categories.length)];
};

exports.setCookie = function (cb) {
  request({ method: 'GET', url: hipAdminBaseURL }, (error, response, body) => {
    const header = JSON.stringify(response.headers);
    const projectCookie = `dotproject=${header.split('dotproject=')[1].split(';')[0]}`;
    const options = {
      method: 'POST',
      url: hipAdminBaseURL,
      followAllRedirects: true,
      headers:
      { 'content-type': 'application/x-www-form-urlencoded',
        'cache-control': 'no-cache',
        cookie: `dotproject=${projectCookie}` },
      form:
      { login: [Math.floor(new Date() / 1000), '\'login\''],
        username: 'APITestAccount',
        password: 'APITestAccount',
        redirect: '' }
    };

    request(options, (error, response, body) => {
      if (error) { throw new Error(error); } else exports.cookie = projectCookie;
      cb();
    });
  });
};

exports.removeAssignments = function (cookie, job, cb) {
  request({
    method: 'GET', // Request to get the current Job assignments
    url: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`,
    headers: {
      'content-type': 'application/x-www-form-urlencoded',
      'cache-control': 'no-cache',
      cookie: `dotproject=${cookie}`
    }
  }, (error, response, body) => {
    if (error) throw error;
    const jobIds = [];
    const re = /\d*\s\(N\)/g;
    const matches = body.match(re);
    if (matches === null) {
      console.log('No existing assignments found.');
      cb();
    } else {
      matches.forEach((match) => {
        jobIds.push(match.split(' ')[0]); // Array containing all job assignment Id's for the Job
      });
      request({
        method: 'POST', // Request to remove assignments
        url: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`,
        form:
        {
          invite_time: '',
          action: 'remove',
          assignment_ids: jobIds.join(),
          job_id: job,
          from: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`
        },
        headers: {
          'content-type': 'application/x-www-form-urlencoded',
          'cache-control': 'no-cache',
          cookie: `dotproject=${cookie}` }
      }
, (error, response, body) => {
        if (error) throw error;
        if (response.statusCode === 302) console.log('Existing assignments removed.');
        cb();
      });
    }
  });
};

exports.createAssignments = function (cookie, job, account, cb) {
  request({
    method: 'POST', // Request for STEP ONE fo the job assignment
    url: `${hipAdminBaseURL}?m=jobs&a=create_assignment&job_id=${job}`,
    headers:
    {
      'content-type': 'application/x-www-form-urlencoded',
      'cache-control': 'no-cache',
      cookie: `dotproject=${cookie}`
    },
    form:
    {
      submit_form: 1,
      step: 'STEP ONE',
      entity_id: account
    }
  }, (error, response, body) => {
    if (error) throw error;
    request({
      method: 'POST', // Request for STEP TWO of the job assignment
      url: `${hipAdminBaseURL}?m=jobs&a=create_assignment&job_id=${job}`,
      headers:
      {
        'content-type': 'application/x-www-form-urlencoded',
        'cache-control': 'no-cache',
        cookie: `dotproject=${cookie}`
      },
      form:
      {
        submit_form: 1,
        step: 'STEP TWO',
        entity_id: account
      }
    },
        (error, resposne, body) => {
          if (error) throw error;
          if (response.statusCode === 200) console.log('Assignment created.');
          cb();
        });
  });
};

exports.invite = function (cookie, job, time, cb) {
  const inviteTime = time ? moment().add(time * 10, 's').unix() : '';
  request({
    method: 'GET', // Request to get the current Job assignments
    url: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`,
    headers:
    {
      'content-type': 'application/x-www-form-urlencoded',
      'cache-control': 'no-cache',
      cookie: `dotproject=${cookie}`
    }
  }, (error, response, body) => {
    if (error) throw error;
    const jobIds = [];
    const re = /\d*\s\(N\)/g;
    const matches = body.match(re);
    if (matches === null) {
      console.log('No assignments to invite.');
      cb();
    } else {
      matches.forEach((match) => {
        jobIds.push(match.split(' ')[0]); // Array containing all job assignment Id's for the Job
      });
      request({
        method: 'POST', // Request to remove assignments
        url: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`,
        form: {
          invite_time: inviteTime,
          action: 'schedule_invite',
          assignment_ids: jobIds.join(),
          job_id: job,
          from: `${hipAdminBaseURL}?m=jobs&a=view_assignments&job_id=${job}`
        },
        headers: {
          'content-type': 'application/x-www-form-urlencoded',
          'cache-control': 'no-cache',
          cookie: `dotproject=${cookie}` }
      }, (error, response, body) => {
        if (error) throw error;
        if (response.statusCode === 302) console.log('Invite sent.');
        cb();
      });
    }
  });
};

exports.postJob = function (options, cb) {
	// console.log(options);
  request(options, (error, response, body) => {
    if (error) throw error;
    if (response.statusCode === 200) {
      const jobId = JSON.parse(body).data.job.job_id;
      cb(jobId);
    }
  });
};

exports.postJobWithQuestions = function (options, cb) {
	// console.log(options);
  request(options
    , (error, response, body) => {
      if (error) throw error;
      if (response.statusCode === 200) {
        const jobId = JSON.parse(body).data.job.job_id;
        cb(jobId);
      }
    });
};

exports.closeJob = function (kiwi, deviceToken, jobId, cb) {
  console.log('closing...');
  request({ method: 'POST',                                   // Request to close a job
    url: `${onDemandServiceBaseURL}/v1/jobs/close`,
    headers:
       { 'content-type': 'application/json' },
    body:
    { app_id: '1',
      app_version: '4.1.5',
      kiwifruit: kiwi,
      // 'bf39480eb0328fc25c2aaa627db332de',
      device_system_name: 'iPhone OS',
      device_token: deviceToken,
      // 'ab780e3f7206e3f4c5550c8c410d418e6ee07958443b2568991da06d366cdf13',
      job_id: jobId,
      device_name: 'Test Phone',
      reason: { id: '7', should_close: 1 },
      device_system_version: '9.3.5',
      push_notifications_enabled: 1,
      device_model: 'iPhone' },
    json: true }, (error, response, body) => {
    if (error) throw error;
    console.log(response.statusCode);
    if (response.statusCode === 200) {
      console.log('Job closed!');
      cb();
    }
  });
};

exports.hire = function (kiwi, deviceToken, jobId, jobAssignmentId, cb) {
  request({ method: 'POST',
    url: `${onDemandServiceBaseURL}/v1/jobs/hire`,
    headers:
       { 'content-type': 'application/json' },
    body:
    { job_assignment_id: jobAssignmentId,
      app_id: '1',
      app_version: '4.1.5',
      kiwifruit: kiwi, // 'bf39480eb0328fc25c2aaa627db332de',
      device_system_name: 'iPhone OS',
      referrer: 0,
      job_id: jobId, // '2847709',
      device_token: deviceToken,
      // 'ab780e3f7206e3f4c5550c8c410d418e6ee07958443b2568991da06d366cdf13',
      device_system_version: '9.3.5',
      device_name: 'Test Phone',
      notify_others: 0,
      push_notifications_enabled: 1,
      device_model: 'iPhone' },
    json: true }, (error, response, body) => {
    if (error) throw error;
    if (response.statusCode === 200) cb();
  });
};

exports.getJob = function (cb) {
  // exports.device_token = 'LQ553R170712V0H0J3550J5U866J02171QI68438886D7679619IM32I689XML77';
  // exports.kiwifruit = '5e211268cc026908ba5b5b64ae0aac3e';
  request({ method: 'GET',
    url: `${hipWSIOSConsumerURL}?payload%5Bdevice_info%5D%5Bdevice_name%5D=Test%20iPhone&payload%5Bkiwifruit%5D=${exports.kiwifruit}&payload%5Bdevice_info%5D%5Bdevice_model%5D=iPhone&payload%5Bdevice_info%5D%5Bdevice_system_version%5D=9.3.5&payload%5Bdevice_info%5D%5Bdevice_system_name%5D=iPhone%20OS&function=get_jobs&payload%5Bdevice_token_new%5D=${exports.deviceToken}&payload%5Bdevice_info%5D%5Bapp_version%5D=4.1.5&payload%5Bdevice_info%5D%5Bpush_notifications_enabled%5D=1&`,
    headers:
       { 'content-type': 'application/json' }
  }, (error, response, body) => {
    if (error) throw error;
    if (response.statusCode === 200) {
      console.log(body);
      cb();
    }
  });
};

exports.sendMsg = function (deviceToken, kiwi, msgBody, cb) {
  request({ method: 'POST',
    url: `${onDemandServiceBaseURL}/v1/messages/ios_consumer`,
    formData: {
      app_id: '1',
      app_version: '4.1.5',
      device_system_name: 'iPhone OS',
      device_token: deviceToken,
      // 'ab780e3f7206e3f4c5550c8c410d418e6ee07958443b2568991da06d366cdf13',
      device_system_version: '9.3.5',
      device_name: 'Test Phone',
      device_model: 'iPhone',
      push_notifications_enabled: '1',
      site_id: '0',
      type: '1',
      kiwifruit: kiwi, // 'bf39480eb0328fc25c2aaa627db332de',
      message_body: msgBody } }, (error, response, body) => {
    if (error) throw error;
    if (response.statusCode === 200) console.log(JSON.parse(body).data.message.message_id);
    cb();
  });
};

function tokenOnly(email, apiUrl, cb) {
  const oldToken = new RandExp(/[A-Z][A-Z]\-\d\d\d\d\w\w\d\d\-\d\d\w\w\-\d\d\w\d\-\d\w\d\d\-\w\d\d\d\d\d\w\w\w\w\w\w/).gen();
  const deviceToken = new RandExp(/\w\w\d\d\d\w\d\w\d\d\d\d\w\d\w\d\w\d\d\d\d\w\d\w\w\d\d\w\d\d\d\w\d\w\w\d\d\d\d\d\d\d\d\w\d\d\d\d\d\d\d\w\w\d\d\w\d\d\d\w\w\w\d\d/).gen();
  const b64string = {
    user: email,
    pass: 'tradie##'
  };
  const buf = Buffer(JSON.stringify(b64string)).toString('base64');
  request({ method: 'GET',
    url: `${apiUrl}`,
    qs:
    { 'payload[device_info][device_name]': 'Sanity Test Phone',
      'payload[device_token_old]': '',
      'payload[device_info][device_model]': 'iPhone',
      'payload[device_info][device_system_version]': '9.3.5',
      'payload[device_info][device_system_name]': 'iPhone OS',
      function: 'save_device_token',
      'payload[device_token_new]': oldToken,
      'payload[device_info][app_version]': '4.1.5',
      'payload[device_info][push_notifications_enabled]': '0' },
    headers:
    { 'cache-control': 'no-cache',
      'content-type': 'application/json' }
  }, (error, response, body) => {
    const devToken = (apiUrl === hipWSAndTradieURL) ? JSON.parse(body).data.android_device_token.token : JSON.parse(body).data.ios_device_token.token;
    if (error) throw new Error(error);
    request({ method: 'GET',
      url: `${apiUrl}`,
      qs:
      { 'payload[device_info][device_name]': 'Test Phone',
        'payload[device_token_old]': devToken,
        'payload[device_info][device_model]': 'iPhone',
        'payload[device_info][device_system_version]': '9.3.5',
        'payload[device_info][device_system_name]': 'iPhone OS',
        function: 'save_device_token',
        'payload[device_token_new]': deviceToken,
        'payload[device_info][app_version]': '4.1.5',
        'payload[device_info][push_notifications_enabled]': '1' },
      headers:
      { 'cache-control': 'no-cache',
        'content-type': 'application/json' }
    }, (error, response, body) => {
      if (error) throw new Error(error);
      exports.deviceToken = devToken;
      cb(buf);
    });
  });
}

exports.consumerKiwi = function (email, cb) {
  tokenOnly(email, hipWSIOSConsumerURL, (buf) => {
    request({
      method: 'GET',
      url: `${hipWSIOSConsumerURL}`,
      qs:
      {
        'payload[device_info][device_name]': 'Test%20Phone',
        'payload[device_info][device_system_version]': '9.3.5',
        'payload[device_info][device_model]': 'iPhone',
        function: 'ca',
        'payload[device_info][device_system_name]': 'iPhone%20OS',
        'payload[device_token_new]': exports.deviceToken,
        'payload[device_info][app_version]': '4.1.5',
        'payload[information]': buf,
        'payload[device_info][push_notifications_enabled]': '1'
      },
      headers:
      {
        'cache-control': 'no-cache',
        'content-type': 'application/json'
      }
    }, (error, response, body) => {
      if (error) throw new Error(error);
      exports.kiwifruit = JSON.parse(body).data.kiwifruit;
      cb();
    });
  });
};

exports.tradieKiwi = function (email, cb) {
  tokenOnly(email, hipWSAndTradieURL, (buf) => {
    request({
      method: 'GET',
      url: `${hipWSAndTradieURL}`,
      qs:
      {
        'payload[device_info][device_name]': 'Test%20Phone',
        'payload[device_info][device_system_version]': '9.3.5',
        'payload[device_info][device_model]': 'iPhone',
        function: 'ta',
        'payload[device_info][device_system_name]': 'iPhone%20OS',
        'payload[device_token_new]': exports.deviceToken,
        'payload[device_info][app_version]': '4.1.5',
        'payload[information]': buf,
        'payload[device_info][push_notifications_enabled]': '1'
      },
      headers:
      {
        'cache-control': 'no-cache',
        'content-type': 'application/json'
      }
    }, (error, response, body) => {
      if (error) throw new Error(error);
      exports.kiwifruit = JSON.parse(body).data.kiwifruit;
      cb();
    });
  });
};

exports.unWaitlist = function (jobAssignmentId, cb) {
  request({ mehtond: 'POST',
    url: `${hipPublicBaseURL}/account/ajax.php?m=job&action=connect`,
    formData: {
      waiting_jasid: jobAssignmentId
    }
  }, (error, response, body) => {
    if (error) throw new Error(error);
    cb();
  });
};

exports.registerUser = function (firstName, lastName, email, cb) {
  request({ method: 'POST',
    url: `${hipPublicBaseURL}/register`,
    headers: {
      'content-type': 'application/x-www-form-urlencoded' },
    form: {
      lt: 'new_user',
      firstname: firstName,
      lastname: lastName,
      email,
      password: 'tradie##',
      password_confirm: 'tradie##' }
  }, (error, response, body) => {
    if (error) throw new Error(error);
    if (response.statusCode === 200 && body.indexOf('/account?registration_success=new_user')) console.log('Registration success!');
    cb();
  });
};

exports.writeToJson = function (fileName, jsonData, cb) {
  if (jsonData === '' || typeof jsonData === 'undefined') {
    console.log('Nothing to write to JSON');
  } else	{
    fs.writeFile(fileName, JSON.stringify(jsonData, null, 2), (err) => {
      if (err) console.log(err.message); else cb();
    });
  }
};

exports.jobQuestions = function (cb) {
  request({ method: 'GET',
    url: `${onDemandServiceBaseURL}/v1/questions`
  }, (error, response, body) => {
    if (error) console.log(error.message);
    if (response.statusCode === 200) cb(body);
  });
};

exports.postJobOptions = function (what, where, when, phone, email, name, dna, withQuestions, attachment, cb) {
  const assign = dna ? '[dna]' : '';
  const qsObj = exports.returnQuestions();
  const questions = withQuestions ? qsObj.json : '';
  const category = withQuestions ? qsObj.category : what[0];
  const desc = withQuestions ? 'A really really long description for the job in question, to validate if it actually shows up in its entirity on the lead when viewed from within the app or elsewhere. Basically making sure that all associated details about the job are visible to tradies so they can make an informed decision and accept leads. $$$$$ ' : '';
  const form = {
    app_id: '1',
    phone,
    describe: `[test]${assign} do not close or invite.${desc}`,
    app_version: '4.1.5',
    device_system_name: 'iPhone OS',
    device_token: '534hghf77fbfgb8vfbv8b7vvbvn9bgfbmg9090jhjhhhjjh908ghy7thh7ffhf',
    device_system_version: '9.3.5',
    device_name: 'APITestAccount',
    email,
    device_model: 'iPhone',
    name,
    push_notifications_enabled: 1,
    when,
    what: category,
    where
  };
  if (withQuestions) {
			// console.log(questions);
    const len = questions ? questions.length : 0;
    for (let i = 0; i < len; i++) {
      form[questions[i][0]] = questions[i][1];
    }
  }
  if (attachment) {
    form['attachment[]'] = attachment;
  }
  const option = { method: 'POST',
    url: `${onDemandServiceBaseURL}/v1/jobs/ios_consumer`,
    formData: form
  };
  // console.log(option);
  cb(option);
};

exports.returnQuestions = function () {
  const json = [];
  const arr = qs.data;
  // const categories = [];
  const catArr = arr.map(item => item.category_id);
  const categoryId = catArr[Math.floor(Math.random() * catArr.length)];
  const res = arr.filter(o => o.category_id === categoryId);
  if (typeof res[0] !== 'undefined') {
    const qsArr = (res[0].questions);
    for (let i = 0; i < qsArr.length; i++) {
      const ansArr = qsArr[i].answers;
      const answer = ansArr[Math.floor(Math.random() * ansArr.length)];
      json.push([`get_quotes_question_${qsArr[i].question_id}`, answer.answer_id]);
    }
    const obj = {
      json,
      category: categoryId
    };
    return obj;
  }
};

exports.uploadAttachments = function (cb) {
  const fileStream = fs.createReadStream('./files/jobAttachment.png');
  const options = { method: 'POST',
    url: `${onDemandServiceBaseURL}/v1/attachments/job`,
    formData:
    { attachment:
    { value: fileStream,
      options: { filename: './files/jobAttachment.png', contentType: null } },
      attachment_type: '2' } };
  request(options, (error, response, body) => {
    if (error) console.log(error.message);
    if (response.statusCode === 200) cb(JSON.parse(body).data.file_name);
  });
};

exports.getInvitedJobs = function (cb) {
  request({
    method: 'GET',						// Request to get kiwifruit
    url: `${hipWSAndTradieURL}`,
    qs:
    {
      function: 'get_jobs',
      'payload[device_info][device_name]': 'HTC',
      'payload[device_info][push_notifications_enabled]': 1,
      'payload[kiwifruit]': exports.kiwifruit,
      'payload[offset]': '',
      'payload[filter_by]': 'invited',
      'payload[device_info][device_system_version]': '5.0.1',
      'payload[device_token_new]': exports.deviceToken,
      'payload[device_info][device_system_name]': 'Android'
    }
  }, (error, response, body) => {
    if (error) throw new Error(error);
    cb(JSON.parse(body).data);
  });
};

exports.declineJob = function (invitationId, assignmentId, cb) {
  request({
    method: 'GET',
    url: `${hipWSAndTradieURL}`,
    qs:
    {
      function: 'decline_job',
      'payload[device_info][device_name]': 'HTC',
      'payload[device_info][push_notifications_enabled]': 1,
      'payload[kiwifruit]': exports.kiwifruit,
      'payload[job_invitation_id]': invitationId,
      'payload[job_assignment_id]': assignmentId,
      'payload[device_info][device_system_version]': '5.0.1',
      'payload[device_token_new]': exports.deviceToken,
      'payload[device_info][device_system_name]': 'Android'
    }
  }, (error, response, body) => {
    if (error) throw new Error(error);
    if (JSON.parse(body).data.response_alert === 'Thank you for letting us know you cannot help. This job is now going to be removed from your job list.') console.log('Declined.');
    cb();
  });
};
